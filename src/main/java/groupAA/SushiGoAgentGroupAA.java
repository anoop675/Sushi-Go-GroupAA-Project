package groupAA;

import core.AbstractGameState;
import core.AbstractPlayer;
import core.actions.AbstractAction;
import groupAA.AMAF_Params;

import java.util.List;
import java.util.Random;

public class SushiGoAgentGroupAA extends AbstractPlayer {

    private static final String AGENT_NAME = "GroupAA MCTS Agent";

    public SushiGoAgentGroupAA() {
        this(System.currentTimeMillis());
    }

    public SushiGoAgentGroupAA(long seed) {
        super(new AMAF_Params(), AGENT_NAME);
        //TODO: Create MyAgentGroupAAParams class to set params for this agent 
        //TODO: Experiment and define parameter values for our MCTS in AMAF_Params
        parameters.setRandomSeed(seed);
        rnd = new Random(seed);
    }

    public SushiGoAgentGroupAA(AMAF_Params params) {
        super(params, AGENT_NAME);
        rnd = new Random(params.getRandomSeed());
    }



    @Override
    public AbstractAction _getAction(AbstractGameState gameState, List<AbstractAction> actions) {
        //TODO: return best action generated by MCTS
        // Placeholder: returns first available action until MCTS implementation is complete
        return selectActionViaMCTS(gameState, actions);
    }

    private AbstractAction selectActionViaMCTS(AbstractGameState gameState, List<AbstractAction> actions) {
        // Placeholder implementation - returns first action until MCTS is fully implemented
        // Future: Initialize TreeNode, run MCTS iterations, return best action
        return actions.get(0);
    }

    @Override
    public String toString() {
        return AGENT_NAME;
    }

    @Override
    public SushiGoAgentGroupAA copy() { return new SushiGoAgentGroupAA((AMAF_Params) parameters.copy()).withFM(); }

    // helper to retain forward model on copy
    private SushiGoAgentGroupAA withFM() { if (getForwardModel()!=null) setForwardModel(getForwardModel()); return this; }
}
